import java.util.*;
public class Prims_Algorithm {

	public static void primsAlgo(int adj[][]) {
		int v = adj.length;
		int parent[] = new int[v];
		int weight[] = new int[v];
		boolean visited[] = new boolean[v];	
		parent[0] =-1;
		weight[0] = 0;
		
		// mark all weight infinity
		for(int i=1; i<v; i++) 
			weight[i] = Integer.MAX_VALUE;
		
		for(int i=0; i<v; i++) {
			// find vertex with min weight
			int minVertex = findMinVertex(weight, visited);
			visited[minVertex] = true;
			
			// explore the neighbours of min vertex
			for(int j=0; j<v; j++) {
				
				if( adj[minVertex][j]!=0 && !visited[j] ){	
					if(adj[minVertex][j]< weight[j]) {
					 weight[j] = adj[minVertex][j];
						parent[j] = minVertex;
					}
					
				}
			}
			
		}
		
		// print edges of MST
		for(int i=1; i<v; i++) {
			if(parent[i]<i) 
			   System.out.println(parent[i] +" "+ i +" " +weight[i]);
			
			else
			 System.out.println(i+ " " + parent[i] +" " +weight[i]);
			
		}
		
	}
	
	
	static int findMinVertex(int[] weight, boolean[] visited) {
        	int minVertex = -1;
		for(int i=0; i<weight.length; i++) {
			if( !visited[i] && (minVertex==-1 || weight[i]<weight[minVertex]) )
				minVertex = i;
		}
		
		return minVertex;
	}
	
	
	public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		int v = s.nextInt();
		int e = s.nextInt();
		int adj[][]= new int [v][v];
		
		for(int i=0; i<e; i++) {
			int fv = s.nextInt();
			int sv = s.nextInt();
			int w = s.nextInt();
			adj[fv][sv] = w;
			adj[sv][fv]= w;
			
		}
		
		primsAlgo(adj);
	}
	
}
